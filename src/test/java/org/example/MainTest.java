package org.example;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

class MainTest {

    Main main;

    private static final double EPS = 1e-9;

    @BeforeEach
    void setUp(){
        main = new Main();
    }

    @Test
    void testCalculateFunction() {
        double x = 1;
        double res = main.calculateFunction(x);
        double expected = 6.4;
        assertEquals(expected, res, EPS);
    }

    @ParameterizedTest
    @CsvSource (value = {"0.0, 4.0",
                         "1.0, 6.4",
                         "1.3, 8.173000000000002",
    "1.4, 3.6490364819799543",
    "1.5, 1.2480754415067656",
    "10, -0.02985111570629966",
    "25, -0.19184658407458355",
    "100, -0.2729863510236647"})
    void testCalculateFParam(double x, double expected){
        assertEquals(expected, main.calculateFunction(x), EPS);
    }

    @Test
    void testStepsAmount() {
        double start = 0.0;
        double end = 2.0;
        double step = 0.002;
        double res = main.stepsAmount(start,end,step);
        double expected = 1001;
        assertEquals(expected, res, EPS);
    }

    @Test
    void testCreateArrayX() {
        double start = 0.0;
        double end = 2.0;
        double step = 0.002;

        List<Double> res = main.createArrayX(start,end,step);

        List<Double> expected = Arrays.asList(0.0,0.002,0.004,0.006,0.008,0.01,0.012,0.014,0.016,0.018,0.02,0.022,0.024,0.026,0.028,0.03,0.032,0.034,0.036,0.038,0.04,0.042,0.044,0.046,0.048,0.05,0.052,0.054,0.056,0.058,0.06,0.062,0.064,0.066,0.068,0.07,0.072,0.074,0.076,0.078,0.08,0.082,0.084,0.086,0.088,0.09,0.092,0.094,0.096,0.098,0.1,0.102,0.104,0.106,0.108,0.11,0.112,0.114,0.116,0.118,0.12,0.122,0.124,0.126,0.128,0.13,0.132,0.134,0.136,0.138,0.14,0.142,0.144,0.146,0.148,0.15,0.152,0.154,0.156,0.158,0.16,0.162,0.164,0.166,0.168,0.17,0.172,0.174,0.176,0.178,0.18,0.182,0.184,0.186,0.188,0.19,0.192,0.194,0.196,0.198,0.2,0.202,0.204,0.206,0.208,0.21,0.212,0.214,0.216,0.218,0.22,0.222,0.224,0.226,0.228,0.23,0.232,0.234,0.236,0.238,0.24,0.242,0.244,0.246,0.248,0.25,0.252,0.254,0.256,0.258,0.26,0.262,0.264,0.266,0.268,0.27,0.272,0.274,0.276,0.278,0.28,0.282,0.284,0.286,0.288,0.29,0.292,0.294,0.296,0.298,0.3,0.302,0.304,0.306,0.308,0.31,0.312,0.314,0.316,0.318,0.32,0.322,0.324,0.326,0.328,0.33,0.332,0.334,0.336,0.338,0.34,0.342,0.344,0.346,0.348,0.35,0.352,0.354,0.356,0.358,0.36,0.362,0.364,0.366,0.368,0.37,0.372,0.374,0.376,0.378,0.38,0.382,0.384,0.386,0.388,0.39,0.392,0.394,0.396,0.398,0.4,0.402,0.404,0.406,0.408,0.41,0.412,0.414,0.416,0.418,0.42,0.422,0.424,0.426,0.428,0.43,0.432,0.434,0.436,0.438,0.44,0.442,0.444,0.446,0.448,0.45,0.452,0.454,0.456,0.458,0.46,0.462,0.464,0.466,0.468,0.47,0.472,0.474,0.476,0.478,0.48,0.482,0.484,0.486,0.488,0.49,0.492,0.494,0.496,0.498,0.5,0.502,0.504,0.506,0.508,0.51,0.512,0.514,0.516,0.518,0.52,0.522,0.524,0.526,0.528,0.53,0.532,0.534,0.536,0.538,0.54,0.542,0.544,0.546,0.548,0.55,0.552,0.554,0.556,0.558,0.56,0.562,0.564,0.566,0.568,0.57,0.572,0.574,0.576,0.578,0.58,0.582,0.584,0.586,0.588,0.59,0.592,0.594,0.596,0.598,0.6,0.602,0.604,0.606,0.608,0.61,0.612,0.614,0.616,0.618,0.62,0.622,0.624,0.626,0.628,0.63,0.632,0.634,0.636,0.638,0.64,0.642,0.644,0.646,0.648,0.65,0.652,0.654,0.656,0.658,0.66,0.662,0.664,0.666,0.668,0.67,0.672,0.674,0.676,0.678,0.68,0.682,0.684,0.686,0.688,0.69,0.692,0.694,0.696,0.698,0.7,0.702,0.704,0.706,0.708,0.71,0.712,0.714,0.716,0.718,0.72,0.722,0.724,0.726,0.728,0.73,0.732,0.734,0.736,0.738,0.74,0.742,0.744,0.746,0.748,0.75,0.752,0.754,0.756,0.758,0.76,0.762,0.764,0.766,0.768,0.77,0.772,0.774,0.776,0.778,0.78,0.782,0.784,0.786,0.788,0.79,0.792,0.794,0.796,0.798,0.8,0.802,0.804,0.806,0.808,0.81,0.812,0.814,0.816,0.818,0.82,0.822,0.824,0.826,0.828,0.83,0.832,0.834,0.836,0.838,0.84,0.842,0.844,0.846,0.848,0.85,0.852,0.854,0.856,0.858,0.86,0.862,0.864,0.866,0.868,0.87,0.872,0.874,0.876,0.878,0.88,0.882,0.884,0.886,0.888,0.89,0.892,0.894,0.896,0.898,0.9,0.902,0.904,0.906,0.908,0.91,0.912,0.914,0.916,0.918,0.92,0.922,0.924,0.926,0.928,0.93,0.932,0.934,0.936,0.938,0.94,0.942,0.944,0.946,0.948,0.95,0.952,0.954,0.956,0.958,0.96,0.962,0.964,0.966,0.968,0.97,0.972,0.974,0.976,0.978,0.98,0.982,0.984,0.986,0.988,0.99,0.992,0.994,0.996,0.998,1.0,1.002,1.004,1.006,1.008,1.01,1.012,1.014,1.016,1.018,1.02,1.022,1.024,1.026,1.028,1.03,1.032,1.034,1.036,1.038,1.04,1.042,1.044,1.046,1.048,1.05,1.052,1.054,1.056,1.058,1.06,1.062,1.064,1.066,1.068,1.07,1.072,1.074,1.076,1.078,1.08,1.082,1.084,1.086,1.088,1.09,1.092,1.094,1.096,1.098,1.1,1.102,1.104,1.106,1.108,1.11,1.112,1.114,1.116,1.118,1.12,1.122,1.124,1.126,1.128,1.13,1.132,1.134,1.136,1.138,1.14,1.142,1.144,1.146,1.148,1.15,1.152,1.154,1.156,1.158,1.16,1.162,1.164,1.166,1.168,1.17,1.172,1.174,1.176,1.178,1.18,1.182,1.184,1.186,1.188,1.19,1.192,1.194,1.196,1.198,1.2,1.202,1.204,1.206,1.208,1.21,1.212,1.214,1.216,1.218,1.22,1.222,1.224,1.226,1.228,1.23,1.232,1.234,1.236,1.238,1.24,1.242,1.244,1.246,1.248,1.25,1.252,1.254,1.256,1.258,1.26,1.262,1.264,1.266,1.268,1.27,1.272,1.274,1.276,1.278,1.28,1.282,1.284,1.286,1.288,1.29,1.292,1.294,1.296,1.298,1.3,1.302,1.304,1.306,1.308,1.31,1.312,1.314,1.316,1.318,1.32,1.322,1.324,1.326,1.328,1.33,1.332,1.334,1.336,1.338,1.34,1.342,1.344,1.346,1.348,1.35,1.352,1.354,1.356,1.358,1.36,1.362,1.364,1.366,1.368,1.37,1.372,1.374,1.376,1.378,1.38,1.382,1.384,1.386,1.388,1.39,1.392,1.394,1.396,1.398,1.4,1.402,1.404,1.406,1.408,1.41,1.412,1.414,1.416,1.418,1.42,1.422,1.424,1.426,1.428,1.43,1.432,1.434,1.436,1.438,1.44,1.442,1.444,1.446,1.448,1.45,1.452,1.454,1.456,1.458,1.46,1.462,1.464,1.466,1.468,1.47,1.472,1.474,1.476,1.478,1.48,1.482,1.484,1.486,1.488,1.49,1.492,1.494,1.496,1.498,1.5,1.502,1.504,1.506,1.508,1.51,1.512,1.514,1.516,1.518,1.52,1.522,1.524,1.526,1.528,1.53,1.532,1.534,1.536,1.538,1.54,1.542,1.544,1.546,1.548,1.55,1.552,1.554,1.556,1.558,1.56,1.562,1.564,1.566,1.568,1.57,1.572,1.574,1.576,1.578,1.58,1.582,1.584,1.586,1.588,1.59,1.592,1.594,1.596,1.598,1.6,1.602,1.604,1.606,1.608,1.61,1.612,1.614,1.616,1.618,1.62,1.622,1.624,1.626,1.628,1.63,1.632,1.634,1.636,1.638,1.64,1.642,1.644,1.646,1.648,1.65,1.652,1.654,1.656,1.658,1.66,1.662,1.664,1.666,1.668,1.67,1.672,1.674,1.676,1.678,1.68,1.682,1.684,1.686,1.688,1.69,1.692,1.694,1.696,1.698,1.7,1.702,1.704,1.706,1.708,1.71,1.712,1.714,1.716,1.718,1.72,1.722,1.724,1.726,1.728,1.73,1.732,1.734,1.736,1.738,1.74,1.742,1.744,1.746,1.748,1.75,1.752,1.754,1.756,1.758,1.76,1.762,1.764,1.766,1.768,1.77,1.772,1.774,1.776,1.778,1.78,1.782,1.784,1.786,1.788,1.79,1.792,1.794,1.796,1.798,1.8,1.802,1.804,1.806,1.808,1.81,1.812,1.814,1.816,1.818,1.82,1.822,1.824,1.826,1.828,1.83,1.832,1.834,1.836,1.838,1.84,1.842,1.844,1.846,1.848,1.85,1.852,1.854,1.856,1.858,1.86,1.862,1.864,1.866,1.868,1.87,1.872,1.874,1.876,1.878,1.88,1.882,1.884,1.886,1.888,1.89,1.892,1.894,1.896,1.898,1.9,1.902,1.904,1.906,1.908,1.91,1.912,1.914,1.916,1.918,1.92,1.922,1.924,1.926,1.928,1.93,1.932,1.934,1.936,1.938,1.94,1.942,1.944,1.946,1.948,1.95,1.952,1.954,1.956,1.958,1.96,1.962,1.964,1.966,1.968,1.97,1.972,1.974,1.976,1.978,1.98,1.982,1.984,1.986,1.988,1.99,1.992,1.994,1.996,1.998,2.0);

        assertEquals(expected.size(),res.size());
        assertEquals(expected,res);
    }

    @Test
    void testCreateArrayY() {
        double start = 0.0;
        double end = 2.0;
        double step = 0.002;

        List<Double> res = main.createArrayY(start,end,step);

        List<Double> expected = Arrays.asList(4.0,3.9994108,3.9988432,3.9982972,3.9977728,3.99727,3.9967888,3.9963292,3.9958912,3.9954748,3.99508,3.9947068,3.9943552,3.9940252,3.9937168,3.99343,3.9931648,3.9929212,3.9926992,3.9924988,3.99232,3.9921628,3.9920272,3.9919132,3.9918208,3.99175,3.9917008,3.9916732,3.9916672,3.9916828,3.99172,3.9917788,3.9918592,3.9919612,3.9920848,3.99223,3.9923968,3.9925852,3.9927952,3.9930268,3.99328,3.9935548,3.9938512,3.9941692,3.9945088,3.99487,3.9952528,3.9956572,3.9960832,3.9965308,3.997,3.9974908,3.9980032,3.9985372,3.9990928,3.99967,4.0002688,4.0008892,4.0015312,4.0021948,4.00288,4.0035868,4.0043152,4.0050652,4.0058368,4.00663,4.0074448,4.0082812,4.0091392,4.0100188,4.01092,4.0118428,4.0127872,4.0137532,4.0147408,4.01575,4.0167808,4.0178332,4.0189072,4.0200028,4.02112,4.0222588,4.0234192,4.0246012,4.0258048,4.02703,4.0282768,4.0295452,4.0308352,4.0321468,4.03348,4.0348348,4.0362112,4.0376092,4.0390288,4.04047,4.0419328,4.0434172,4.0449232,4.0464508,4.048,4.0495708,4.0511632,4.0527772,4.0544128,4.05607,4.0577488,4.0594492,4.0611712,4.0629148,4.06468,4.0664668,4.0682752,4.0701052,4.0719568,4.07383,4.0757248,4.0776412,4.0795792,4.0815388,4.08352,4.0855228,4.0875472,4.0895932,4.0916608,4.09375,4.0958608,4.0979932,4.1001472,4.1023228,4.10452,4.1067388000000005,4.1089792,4.1112412,4.1135248,4.11583,4.1181568,4.1205052,4.1228752,4.1252668,4.12768,4.1301148,4.1325712,4.1350492,4.1375488,4.14007,4.1426128,4.1451772,4.1477632,4.1503708,4.153,4.1556508,4.1583232,4.1610172,4.1637328,4.16647,4.1692288,4.1720092,4.1748112,4.1776348,4.18048,4.1833468,4.1862352000000005,4.1891452000000005,4.1920768,4.19503,4.1980048,4.2010012,4.2040192,4.2070588,4.21012,4.2132028,4.2163072,4.2194332,4.2225808,4.22575,4.2289408,4.2321532,4.2353872,4.2386428,4.24192,4.2452188,4.2485392,4.2518812,4.2552448,4.25863,4.2620368,4.2654652,4.2689152,4.2723868,4.27588,4.2793948,4.2829312,4.2864892,4.2900688,4.2936700000000005,4.2972928,4.3009372,4.3046032,4.3082908,4.312,4.3157308,4.3194832000000005,4.3232572000000005,4.3270528,4.33087,4.3347088,4.3385692,4.3424512,4.3463548,4.35028,4.3542268,4.3581952,4.3621852,4.3661968,4.37023,4.3742848,4.3783612000000005,4.3824591999999996,4.3865788000000006,4.39072,4.3948828,4.3990672,4.4032732,4.4075008,4.41175,4.4160208,4.4203132,4.4246272,4.4289628,4.43332,4.4376988,4.4420992,4.4465212,4.4509648,4.45543,4.4599168,4.4644252,4.4689552,4.4735068,4.47808,4.4826748,4.4872912,4.4919292,4.4965888,4.50127,4.5059728,4.5106972,4.5154432,4.5202108,4.525,4.5298108,4.5346432,4.5394972,4.5443728,4.54927,4.5541888,4.5591292,4.5640912,4.5690748,4.57408,4.5791068,4.5841552,4.5892252,4.5943168000000005,4.59943,4.6045648,4.6097212,4.6148992,4.6200988,4.62532,4.6305628,4.6358272000000005,4.6411132,4.6464208000000005,4.65175,4.6571008,4.6624732,4.6678672,4.6732828,4.67872,4.684178800000001,4.6896591999999995,4.6951612,4.7006848,4.70623,4.7117968,4.7173852,4.7229952,4.7286268,4.73428,4.7399548,4.7456512,4.7513692,4.7571088,4.7628699999999995,4.7686528,4.7744572,4.7802831999999995,4.7861308000000005,4.792,4.7978908,4.8038032,4.8097372,4.8156928,4.82167,4.8276688,4.8336892,4.8397312,4.8457948,4.85188,4.8579868,4.8641152000000005,4.8702652,4.8764368000000005,4.88263,4.8888448,4.8950812,4.9013392,4.9076188,4.91392,4.9202428000000005,4.9265872,4.9329532,4.9393408,4.94575,4.952180800000001,4.9586332,4.9651072,4.9716028,4.9781200000000005,4.9846588,4.9912192,4.9978012000000005,5.0044048000000005,5.01103,5.0176768,5.024345200000001,5.0310352,5.037746800000001,5.04448,5.0512348,5.0580112,5.0648092,5.0716288,5.078469999999999,5.0853328,5.0922172,5.099123199999999,5.1060508,5.1129999999999995,5.1199708,5.1269632,5.1339772,5.1410128,5.14807,5.1551488,5.1622492,5.1693712000000005,5.1765148,5.18368,5.1908668,5.1980752,5.2053052,5.2125568,5.21983,5.2271248,5.2344412,5.2417792,5.2491388,5.25652,5.2639228000000005,5.2713472,5.2787932,5.2862608,5.29375,5.3012608,5.3087932,5.3163472,5.3239228,5.33152,5.339138800000001,5.3467792,5.3544412,5.3621248,5.36983,5.3775568,5.3853052,5.3930752,5.4008668,5.40868,5.4165148,5.4243711999999995,5.4322492,5.4401488,5.44807,5.4560128,5.4639772,5.4719632,5.4799708,5.488,5.496050800000001,5.5041232,5.5122172,5.5203328,5.52847,5.5366288,5.5448091999999995,5.5530112,5.5612348,5.5694799999999995,5.5777468,5.5860351999999995,5.594345199999999,5.6026768,5.61103,5.6194048,5.6278012,5.6362192,5.6446588,5.65312,5.6616028,5.6701072,5.6786332,5.6871808,5.69575,5.7043408,5.7129532,5.7215872,5.7302428,5.73892,5.7476188,5.7563392,5.7650812,5.7738448,5.78263,5.7914368,5.8002652,5.809115200000001,5.8179868,5.82688,5.8357948,5.8447312,5.8536892,5.8626688,5.87167,5.8806928,5.8897372,5.8988032,5.9078908000000006,5.917,5.9261308,5.935283200000001,5.9444572,5.9536528,5.962870000000001,5.9721088,5.9813692000000005,5.9906512,5.9999548,6.00928,6.0186268,6.0279952,6.037385200000001,6.046796800000001,6.05623,6.0656848000000005,6.0751612,6.0846592,6.0941788,6.103719999999999,6.1132828,6.1228672,6.1324732,6.1421008,6.15175,6.1614208,6.171113200000001,6.1808271999999995,6.1905628,6.20032,6.2100988,6.2198992,6.2297212,6.2395648,6.24943,6.259316800000001,6.2692252,6.2791552,6.2891068,6.29908,6.3090748,6.3190912,6.329129200000001,6.3391888000000005,6.34927,6.3593728,6.3694972,6.3796432,6.3898108,6.4,6.4102108,6.4204432,6.4306972,6.4409728,6.451270000000001,6.4615888,6.4719292,6.482291200000001,6.4926748,6.503080000000001,6.5135068,6.5239552000000005,6.534425200000001,6.5449168,6.555429999999999,6.565964800000001,6.5765212,6.587099200000001,6.597698800000001,6.608320000000001,6.6189628,6.6296272,6.6403132000000005,6.6510208,6.6617500000000005,6.6725008,6.6832732,6.694067200000001,6.7048828,6.715720000000001,6.7265788,6.7374592,6.7483612000000015,6.7592848000000005,6.77023,6.7811968,6.7921852000000005,6.803195200000001,6.814226800000001,6.825280000000001,6.8363548000000005,6.8474512,6.858569200000001,6.869708800000001,6.880870000000001,6.8920528,6.9032572000000005,6.914483200000001,6.9257308,6.937000000000001,6.9482908000000005,6.9596032,6.970937200000002,6.982292800000001,6.99367,7.005068800000001,7.0164892000000005,7.027931200000001,7.039394800000001,7.050880000000001,7.0623868000000005,7.073915200000001,7.0854652,7.0970368,7.10863,7.1202448,7.1318812,7.1435392,7.1552188,7.166919999999999,7.1786428,7.1903872,7.2021532,7.2139408,7.22575,7.2375808,7.2494332,7.261307199999999,7.2732028,7.28512,7.2970588,7.3090192,7.3210011999999995,7.333004799999999,7.3450299999999995,7.3570768,7.3691452,7.381235200000001,7.3933468,7.40548,7.4176348,7.4298112,7.442009199999999,7.4542288,7.46647,7.4787327999999995,7.4910172,7.5033232000000005,7.5156507999999995,7.5280000000000005,7.5403708,7.5527632,7.5651772,7.5776128,7.59007,7.6025488,7.6150492,7.6275712,7.6401148,7.65268,7.6652668,7.677875200000001,7.6905052000000005,7.7031568,7.71583,7.7285248,7.741241200000001,7.7539792,7.766738800000001,7.779520000000001,7.792322800000001,7.8051472,7.8179932,7.8308608,7.84375,7.8566608,7.869593200000001,7.882547200000001,7.8955228,7.90852,7.9215388,7.934579200000001,7.9476412,7.9607248,7.97383,7.9869568,8.0001052,8.0132752,8.026466800000001,8.03968,8.0529148,8.0661712,8.0794492,8.0927488,8.10607,8.119412800000001,8.1327772,8.1461632,8.159570800000001,8.173000000000002,8.186450800000001,8.1999232,8.2134172,8.2269328,8.240470000000002,8.2540288,8.2676092,8.281211200000001,8.2948348,8.308480000000001,8.3221468,8.335835200000002,8.349545200000001,8.363276800000001,8.377030000000001,8.390804800000002,8.404601200000002,8.4184192,8.432258800000001,8.44612,8.460002800000002,8.473907200000001,8.4878332,8.501780800000002,8.51575,8.5297408,8.543753200000001,8.557787200000002,8.5718428,8.585920000000002,8.6000188,8.6141392,8.628281200000002,8.6424448,8.656630000000002,8.6708368,8.6850652,8.6993152,8.7135868,8.727879999999999,8.7421948,8.756531200000001,8.7708892,8.785268799999999,8.799669999999999,8.8140928,8.8285372,8.8430032,8.8574908,3.6490364819799543,1.32362196207828,1.3220232659226292,1.3204269902244237,1.3188331319864188,1.317241688202428,1.3156526558574608,1.3140660319278614,1.312481813381444,1.3108999971776283,1.3093205802675727,1.3077435595943097,1.3061689320928749,1.3045966946904388,1.3030268443064368,1.3014593778526973,1.2998942922335697,1.2983315843460501,1.2967712510799085,1.2952132893178099,1.2936576959354409,1.29210446780163,1.2905536017784696,1.289005094721436,1.2874589434795085,1.2859151448952888,1.284373695805116,1.2828345930391845,1.281297833421658,1.279763413770786,1.2782313308990136,1.2767015816130978,1.275174162714215,1.2736490709980741,1.2721263032550247,1.270605856270166,1.269087726823454,1.2675719116898083,1.2660584076392185,1.2645472114368481,1.2630383198431379,1.2615317296139108,1.2600274375004723,1.2585254402497117,1.2570257346042042,1.2555283173023077,1.2540331850782638,1.252540334662293,1.2510497627806942,1.2495614661559387,1.2480754415067656,1.2465916855482775,1.2451101949920318,1.2436309665461351,1.242153996915334,1.2406792828011062,1.2392068209017506,1.2377366079124772,1.2362686405254957,1.2348029154301012,1.2333394293127644,1.231878178857215,1.2304191607445287,1.228962371653211,1.2275078082592812,1.2260554672363564,1.2246053452557317,1.2231574389864641,1.221711745095452,1.220268260247515,1.2188269811054748,1.2173879043302314,1.2159510265808438,1.2145163445146052,1.2130838547871194,1.2116535540523783,1.210225438962834,1.2087995061694767,1.2073757523219053,1.205954174068402,1.2045347680560041,1.2031175309305753,1.2017024593368772,1.2002895499186388,1.198878799318627,1.1974702041787146,1.1960637611399492,1.1946594668426203,1.1932573179263266,1.1918573110300423,1.1904594427921826,1.1890637098506693,1.187670108842994,1.186278636406283,1.1848892891773606,1.1835020637928109,1.1821169568890397,1.180733965102337,1.1793530850689364,1.1779743134250766,1.1765976468070596,1.1752230818513107,1.1738506151944363,1.1724802434732826,1.1711119633249911,1.1697457713870583,1.1683816642973883,1.167019638694351,1.1656596912168358,1.1643018185043064,1.1629460171968549,1.161592283935255,1.1602406153610154,1.1588910081164308,1.1575434588446347,1.1561979641896505,1.1548545207964422,1.1535131253109645,1.1521737743802118,1.1508364646522697,1.1495011927763608,1.1481679554028943,1.146836749183514,1.1455075707711446,1.144180416820039,1.1428552839858241,1.1415321689255473,1.1402110682977205,1.1388919787623657,1.1375748969810597,1.1362598196169766,1.1349467433349323,1.1336356648014267,1.1323265806846872,1.1310194876547093,1.129714382383299,1.1284112615441135,1.127110121812702,1.1258109598665471,1.1245137723851018,1.1232185560498311,1.1219253075442508,1.1206340235539647,1.1193447007667041,1.118057335872364,1.1167719255630422,1.1154884665330744,1.114206955479071,1.1129273890999538,1.1116497640969911,1.1103740771738326,1.1091003250365452,1.1078285043936464,1.106558611956139,1.105290644437544,1.1040245985539345,1.1027604710239687,1.1014982585689215,1.1002379579127173,1.0989795657819623,1.097723078905975,1.096468494016817,1.0952158078493244,1.0939650171411377,1.0927161186327323,1.0914691090674469,1.0902239851915143,1.088980743754089,1.0877393815072764,1.0864998952061604,1.0852622816088324,1.084026537476418,1.0827926595731032,1.081560644666164,1.0803304895259904,1.0791021909261138,1.0778757456432324,1.0766511504572367,1.0754284021512364,1.0742074975115823,1.0729884333278934,1.0717712063930807,1.0705558135033704,1.069342251458328,1.0681305170608821,1.0669206071173478,1.065712518437448,1.0645062478343372,1.0633017921246235,1.0620991481283901,1.0608983126692177,1.0596992825742049,1.0585020546739903,1.0573066258027723,1.0561129927983302,1.0549211525020445,1.0537311017589168,1.0525428374175891,1.0513563563303636,1.0501716553532225,1.0489887313458455,1.0478075811716288,1.0466282016977047,1.0454505897949586,1.0442747423380476,1.0431006562054161,1.0419283282793173,1.040757755445825,1.0395889345948555,1.0384218626201809,1.0372565364194462,1.0360929528941873,1.0349311089498436,1.033771001495777,1.0326126274452856,1.0314559837156183,1.0303010672279913,1.029147874907602,1.0279964036836449,1.0268466504893228,1.025698612261864,1.0245522859425356,1.0234076684766547,1.0222647568136058,1.0211235479068501,1.0199840387139418,1.0188462261965385,1.0177101073204153,1.016575679055476,1.0154429383757664,1.0143118822594852,1.0131825076889966,1.0120548116508425,1.0109287911357514,1.009804443138652,1.0086817646586834,1.0075607526992059,1.006441404267811,1.0053237163763327,1.004207686040858,1.003093310281735,1.0019805861235858,1.000869510595313,0.9997600807301112,0.9986522935654764,0.9975461461432135,0.9964416355094475,0.9953387587146302,0.9942375128135497,0.9931378948653394,0.9920399019334858,0.9909435310858359,0.9898487793946064,0.9887556439363913,0.9876641217921678,0.9865742100473063,0.985485905791576,0.9843992061191525,0.9833141081286249,0.9822306089230023,0.9811487056097212,0.980068395300651,0.9789896751121013,0.9779125421648273,0.9768369935840364,0.9757630264993941,0.9746906380450293,0.9736198253595408,0.9725505855860024,0.9714829158719672,0.9704168133694746,0.9693522752350539,0.9682892986297305,0.967227880719029,0.9661680186729799,0.9651097096661224,0.96405295087751,0.9629977394907138,0.9619440726938268,0.9608919476794692,0.95984136164479,0.9587923117914726,0.9577447953257379,0.9566988094583472,0.9556543514046063,0.9546114183843685,0.9535700076220379,0.9525301163465719,0.9514917417914844,0.950454881194849,0.9494195317993008,0.9483856908520394,0.9473533556048315,0.9463225233140132,0.9452931912404916,0.944265356649748,0.9432390168118384,0.9422141690013963,0.9411908104976352,0.9401689385843481,0.9391485505499116);
        assertEquals(expected.size(),res.size());
        assertEquals(expected,res);
    }

    @Test
    void testFindMax() {
        List<Double> list1 = main.createArrayX(0.0,2.0,0.002);
        double maxRes1 = main.findMax(list1);

        List<Double> list2 = main.createArrayY(0.0,2.0,0.002);
        double maxRes2 = main.findMax(list2);

        assertEquals(2.0,maxRes1);
        assertEquals(8.8574908,maxRes2);
    }

    @Test
    void testFindMin() {
        List<Double> list1 = main.createArrayX(0.0,2.0,0.002);
        double minRes1 = main.findMin(list1);

        List<Double> list2 = main.createArrayY(0.0,2.0,0.002);
        double minRes2 = main.findMin(list2);

        assertEquals(0.0,minRes1);
        assertEquals(0.9391485505499116,minRes2);

    }

    @Test
    void testFindSum() {
        List<Double> list1 = main.createArrayX(0.0,2.0,0.002);
        double sumRes1 = main.findSum(list1);

        List<Double> list2 = main.createArrayY(0.0,2.0,0.002);
        double sumRes2 = main.findSum(list2);

        assertEquals(1001.0,sumRes1);
        assertEquals(4224.112998155183,sumRes2);
    }

    @Test
    void testFindAverage() {
        List<Double> list1 = main.createArrayX(0.0,2.0,0.002);
        double averageRes1 = main.findAverage(list1);

        List<Double> list2 = main.createArrayY(0.0,2.0,0.002);
        double averageRes2 = main.findAverage(list2);

        assertEquals(1.0,averageRes1);
        assertEquals(4.219893105050133,averageRes2);
    }
}